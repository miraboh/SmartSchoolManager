{
  "chapIndex": "The Role of Algorithms in Computing",
  "text": "Informally,  analgorithmis any well-defined computational  procedure that takessome value, or set of values, asinputand produces some value, or set of values, asoutput. An algorithm is thus a sequence of computational steps that transform theinput into the output.We can also view an algorithm as a tool for solving a well-specifiedcomputa-tional problem. The statement of the problem specifies in general terms the desiredinput/output relationship. The algorithm describes a specific computational proce-dure for achieving that input/output relationship.For example, we might need to sort a sequence of numbers into nondecreasingorder.  This problem arises frequently in practice and provides fertile ground forintroducing many standard design techniques and analysis tools.  Here is how weformally define thesorting problem:Input:A sequence ofnnumbersha1;a2;:::;ani.Output:A permutation (reordering)ha01;a02;:::;a0niof the input sequence.For example, given the input sequenceh31; 41; 59; 26; 41; 58i, a sorting algorithmreturns as output the sequenceh26; 31; 41; 41; 58; 59i.  Such an input sequence iscalled aninstanceof the sorting problem.  In general,  aninstance of a problemconsists of the input (satisfying whatever constraints are imposed in the problemstatement) needed to compute a solution to the problem Because many programs use it as an intermediate step, sorting is a fundamentaloperation in computer science. As a result, we have a large number of good sortingalgorithms at our disposal. Which algorithm is best for a given application dependson—among other factors—the number of items to be sorted, the extent to whichthe  items  are already  somewhat  sorted,  possible  restrictions  on the  item  values,the architecture of the computer, and the kind of storage devices to be used:  mainmemory, disks, or even tapes.An algorithm is said to becorrectif, for every input instance, it halts with thecorrect  output.   We say  that  a correct  algorithmsolvesthe  given  computationalproblem. An incorrect algorithm might not halt at all on some input instances, or itmight halt with an incorrect answer. Contrary to what you might expect, incorrectalgorithms can sometimes be useful, if we can control their error rate. We shall seean example of an algorithm with a controllable error rate in Chapter 31 when westudy algorithms for finding large prime numbers.  Ordinarily, however, we shallbe concerned only with correct algorithms.An algorithm  can be specified in English,  as a computer  program,  or even asa hardware design.  The only requirement is that the specification must provide aprecise description of the computational procedure to be followed."
}