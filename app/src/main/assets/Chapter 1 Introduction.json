{
  "chapIndex": "Introduction",
  "text": "This part will start you thinking about designing and analyzing algorithms.  It isintended  to be a gentle  introduction  to how we specify  algorithms,  some of thedesign strategies we will use throughout this book, and many of the fundamentalideas used in algorithm analysis. Later parts of this book will build upon this base.Chapter 1 provides an overview of algorithms and their place in modern com-puting systems. This chapter defines what an algorithm is and lists some examples.It also makes a case that we should consider  algorithms  as a technology,  along-side technologies such as fast hardware, graphical user interfaces, object-orientedsystems, and networks.In Chapter 2,  we see our first algorithms,  which solve the problem  of sortinga sequence ofnnumbers.  They are written in a pseudocode which, although notdirectly translatable to any conventional programming language, conveys the struc-ture of the algorithm clearly enough that you should be able to implement it in thelanguage  of your  choice.   The sorting algorithms  we examine are insertion  sort,which uses an incremental approach, and merge sort, which uses a recursive tech-nique known as “divide-and-conquer.”  Although the time each requires increaseswith the value ofn, the rate of increase differs between the two algorithms.  Wedetermine these running times in Chapter 2, and we develop a useful notation toexpress them.Chapter 3 precisely defines this notation, which we call asymptotic notation.  Itstarts by defining several asymptotic notations, which we use for bounding algo-rithm running times from above and/or below.  The rest of Chapter 3 is primarilya presentation of mathematical notation, more to ensure that your use of notationmatches that in this book than to teach you new mathematical concepts."
}