{
  "chapIndex": "Elementary Data Structures",
  "text": "In this chapter, we examine the representation of dynamic sets by simple data struc-tures that use pointers.  Although we can construct many complex data structuresusing pointers, we present only the rudimentary ones:  stacks, queues, linked lists,and rooted trees.  We also show ways to synthesize objects and pointers from ar-rays.Stacks and queues are dynamic sets in which the element removed from the setby  the  DELETEoperation  is  prespecified.   In astack,  the  element  deleted  fromthe set is the one most recently inserted:  the stack implements alast-in, first-out,orLIFO, policy.  Similarly, in aqueue, the element deleted is always the one thathas been in the set for the longest time:  the queue implements afirst-in, first-out,orFIFO, policy.  There are several efficient ways to implement stacks and queueson a computer.  In this section we show how to use a simple array to implementeach.StacksThe INSERToperation  on a stack is often called  PUSH,andtheDELETEopera-tion, which does not take an element argument, is often called POP.  These namesare  allusions  to physical  stacks,  such  as the  spring-loaded  stacks  of  plates  usedin cafeterias.  The order in which plates are popped from the stack is the reverseof the order in which they were pushed onto the stack, since only the top plate isaccessible.As Figure 10.1 shows,  we can implement  a stack of at mostnelements withan arraySŒ1::n.  The array has an attributeS:topthat indexes the most recently"
}