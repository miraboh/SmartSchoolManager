{
  "chapIndex": "The Liskov Substitution Principle (LSP)",
  "text": "This principle was coined by Barbar Liskov2 in her work regarding data abstraction and type theory. It also derives from the concept of Design by Contract (DBC) by Bertrand Meyer3. The concept, as stated above, is depicted in Figure 2-14. Derived classes should be substitutable for their base classes. That is, a user of a base class should continue to function properly if a derivative of that base class is passed to it.Clients Ruin Everything.     Certainly the model we have created is self consis-tent. An instance of Circle will obeys all the rules of a circle. There is nothing you can do to it to make it violate those rules. So too for Ellipse. The two classes form a nicely consistent model, even if Circle has one too many data elements.However, Circle and Ellipse do not live alone in a universe by themselves. They cohabit that universe with many other entities, and provide their public inter-faces to those entities. Those interfaces imply a contract. The contract may not be explicitly stated, but it is there nonetheless. For example, users of Ellipse have the right to expect the following code fragment to succeed:"
}